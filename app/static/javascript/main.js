// Generated by CoffeeScript 1.10.0
(function() {
  var Activities, Activity, LoadingDots, Main, MainContent, RideInfo, Sidebar, StravaMap, Weather, ce, createClass, d;

  LoadingDots = React.createFactory(React.createClass({
    displayName: "LoadingDots",
    propTypes: {
      thingToLoad: React.PropTypes.string
    },
    render: function() {
      return d.h1({
        className: "loader center"
      }, "Loading " + this.props.thingToLoad, d.span({}, "."), d.span({}, "."), d.span({}, "."));
    }
  }));

  d = React.DOM;

  ce = React.createElement;

  Weather = React.createFactory(React.createClass({
    displayName: "Weather",
    propTypes: {
      activity: React.PropTypes.object
    },
    getInitialState: function() {
      return {
        loading: false,
        weather: null
      };
    },
    degreesToDirection: function(deg) {
      var dir, getDirection;
      dir = deg - 11.25;
      getDirection = function() {
        switch (dir) {
          case 0:
            return 'NNE';
          case 1:
            return 'NE';
          case 2:
            return 'ENE';
          case 3:
            return 'E';
          case 4:
            return 'ESE';
          case 5:
            return 'SE';
          case 6:
            return 'SSE';
          case 7:
            return 'S';
          case 8:
            return 'SSW';
          case 9:
            return 'SW';
          case 10:
            return 'WSW';
          case 11:
            return 'W';
          case 12:
            return 'WNW';
          case 13:
            return 'NW';
          case 14:
            return 'NNW';
          case 15:
            return 'N';
          default:
            return 'unknown';
        }
      };
      if (dir < 0) {
        dir = 360 + dir;
      }
      dir = dir / (360 / 16);
      dir = Math.floor(dir);
      dir = getDirection(dir);
      return dir;
    },
    loadTheWeather: function() {
      var skycons;
      skycons = new Skycons({
        color: "#FC4C02"
      });
      skycons.remove("weather_icon");
      this.setState({
        loading: true
      });
      return $.ajax({
        url: "/strava/activity/" + this.props.activity.id + "/weather_at_start",
        success: (function(_this) {
          return function(res) {
            var weather;
            weather = res.data;
            _this.setState({
              loading: false,
              weather: weather
            });
            skycons.add("weather_icon", weather.icon);
            return skycons.play();
          };
        })(this)
      });
    },
    componentDidMount: function() {
      return this.loadTheWeather();
    },
    componentDidUpdate: function(prevProps, prevState) {
      var ref;
      if (this.props.activity.id === ((ref = prevProps.activity) != null ? ref.id : void 0)) {

      } else {
        return this.loadTheWeather();
      }
    },
    render: function() {
      return d.div({}, this.state.loading ? LoadingDots({
        thingToLoad: "Weather"
      }) : !this.state.weather ? d.h1({}, "Weather widget") : d.div({
        className: "weather-widget__content center"
      }, d.canvas({
        id: "weather_icon",
        width: 128,
        height: 128
      }, ""), d.ul({
        className: "weather-widget__description"
      }, d.li({}, "Temperature: " + this.state.weather.temperature + (String.fromCharCode(0x2109))), d.li({}, "Windspeed: " + this.state.weather.windSpeed + " " + (this.degreesToDirection(this.state.weather.windBearing))))));
    }
  }));

  LoadingDots = React.createFactory(React.createClass({
    displayName: "LoadingDots",
    propTypes: {
      thingToLoad: React.PropTypes.string
    },
    render: function() {
      return d.h1({
        className: "loader center"
      }, "Loading " + this.props.thingToLoad, d.span({}, "."), d.span({}, "."), d.span({}, "."));
    }
  }));

  d = React.DOM;

  ce = React.createElement;

  StravaMap = React.createFactory(React.createClass({
    displayName: "StravaMap",
    defaultPublicToken: "pk.eyJ1IjoicmphbWVzODYiLCJhIjoiY2ltam53d2F5MDBzZnY4a2cyaWR4Y3pnMyJ9.SM84_1rqm7WiwAl4uO7RIw",
    propTypes: {
      activity: React.PropTypes.object
    },
    decodePolyline: function() {
      return polyline.decode(this.props.activity['map'].summary_polyline);
    },
    componentDidUpdate: function(prevProps, prevState) {
      var ref;
      if (this.props.activity.id === ((ref = prevProps.activity) != null ? ref.id : void 0)) {

      } else {
        this.polyline.remove();
        return this.addLayer();
      }
    },
    addLayer: function() {
      this.polyline = L.polyline(this.decodePolyline(), {
        color: "red"
      }).addTo(mymap);
      return mymap.fitBounds(this.polyline.getBounds());
    },
    componentDidMount: function() {
      window.mymap = L.map('map').setView([37.76289, -122.43468], 13);
      L.tileLayer("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=" + this.defaultPublicToken, {
        maxZoom: 18,
        accessToken: this.defaultPublicToken
      }).addTo(mymap);
      return this.addLayer();
    },
    render: function() {
      if (this.props.activity) {
        return d.div({
          className: "map-container"
        }, d.div({
          id: "map",
          style: {
            position: "absolute",
            top: 0,
            bottom: 0,
            width: "100%"
          }
        }));
      } else {
        return LoadingDots({
          thingToLoad: "Map"
        });
      }
    }
  }));

  d = React.DOM;

  ce = React.createElement;

  RideInfo = React.createFactory(React.createClass({
    displayName: "RideInfo",
    propTypes: {
      activity: React.PropTypes.object
    },
    metersToMiles: function(distance) {
      var miles;
      miles = distance / 1609.344;
      return Math.round(miles * 100) / 100;
    },
    metersToFeet: function(distance) {
      var miles;
      miles = this.metersToMiles(distance) * 5280;
      return Math.round(miles * 100) / 100;
    },
    secondsToHours: function(seconds) {
      var hours, minutes, sec_num;
      sec_num = parseInt(seconds, 10);
      hours = Math.floor(sec_num / 3600);
      minutes = Math.floor((sec_num - (hours * 3600)) / 60);
      seconds = sec_num - (hours * 3600) - (minutes * 60);
      if (hours < 10) {
        hours = "0" + hours;
      }
      if (minutes < 10) {
        minutes = "0" + minutes;
      }
      if (seconds < 10) {
        seconds = "0" + seconds;
      }
      return hours + ':' + minutes + ':' + seconds;
    },
    kilometersToMiles: function(distance) {
      var miles;
      miles = distance / 0.44704;
      return Math.round(miles * 100) / 100;
    },
    isoToDate: function(ts) {
      var date;
      date = new Date(Date.parse(ts));
      return (date.getFullYear()) + "-" + (date.getMonth() + 1) + "-" + (date.getDate());
    },
    render: function() {
      return d.div({
        className: "row"
      }, d.div({
        className: "col-md-12"
      }, d.h2({
        className: "center"
      }, this.props.activity.name)), d.div({
        className: "col-md-12 center"
      }, d.ul({
        className: "rideinfo"
      }, d.li({}, "Start Time: " + (this.isoToDate(this.props.activity.start_date_local))), d.li({}, "Distance: " + (this.metersToMiles(this.props.activity.distance)) + " mi"), d.li({}, "Elapsed Time: " + (this.secondsToHours(this.props.activity.elapsed_time)))), d.ul({
        className: "rideinfo"
      }, d.li({}, "Elevation Gain: " + (this.metersToFeet(this.props.activity.total_elevation_gain)) + " ft"), d.li({}, "Max Speed: " + (this.kilometersToMiles(this.props.activity.max_speed)) + " mph"), !!this.props.activity.gear ? d.li({}, "Gear: " + this.props.activity.gear.name) : void 0)));
    }
  }));

  d = React.DOM;

  ce = React.createElement;

  MainContent = React.createFactory(React.createClass({
    displayName: "MainContent",
    propTypes: {
      selectedActivity: React.PropTypes.object
    },
    render: function() {
      if (!this.props.selectedActivity) {
        return d.h1({
          className: "center"
        }, "Select an activity to get started");
      } else {
        return d.div({}, d.div({
          className: "row weather-rideinfo-container"
        }, d.div({
          className: "col-md-6"
        }, this.props.selectedActivity ? Weather({
          activity: this.props.selectedActivity
        }) : void 0), d.div({
          className: "col-md-6 strava-ride-info"
        }, this.props.selectedActivity ? RideInfo({
          activity: this.props.selectedActivity
        }) : void 0)), d.div({
          className: "row strava-map"
        }, d.div({
          className: "col-md-12"
        }, this.props.selectedActivity ? StravaMap({
          activity: this.props.selectedActivity
        }) : void 0)));
      }
    }
  }));

  LoadingDots = React.createFactory(React.createClass({
    displayName: "LoadingDots",
    propTypes: {
      thingToLoad: React.PropTypes.string
    },
    render: function() {
      return d.h1({
        className: "loader center"
      }, "Loading " + this.props.thingToLoad, d.span({}, "."), d.span({}, "."), d.span({}, "."));
    }
  }));

  d = React.DOM;

  ce = React.createElement;

  createClass = React.createFactory(React.createClass);

  Activity = React.createFactory(React.createClass({
    displayName: "Activity",
    propTypes: {
      activity: React.PropTypes.object,
      onSelectActivity: React.PropTypes.func,
      selectedActivity: React.PropTypes.object
    },
    metersToMiles: function(distance) {
      var miles;
      miles = distance / 1609.344;
      return Math.round(miles * 100) / 100;
    },
    isoToDate: function(ts) {
      var date;
      date = new Date(Date.parse(ts));
      return (date.getFullYear()) + "-" + (date.getMonth() + 1) + "-" + (date.getDate());
    },
    selectActivity: function(activity) {
      return $.ajax({
        url: "/strava/activity/" + activity.id,
        success: (function(_this) {
          return function(res) {
            return _this.props.onSelectActivity(res.data);
          };
        })(this)
      });
    },
    render: function() {
      var activeClass, ref;
      activeClass = this.props.activity.id === ((ref = this.props.selectedActivity) != null ? ref.id : void 0) ? "active" : "";
      return d.div({
        className: "list-group"
      }, d.a({
        className: "list-group-item " + activeClass,
        onClick: (function(_this) {
          return function() {
            return _this.selectActivity(_this.props.activity);
          };
        })(this)
      }, d.h4({
        className: "list-group-item-heading"
      }, this.props.activity.name), d.p({
        className: "list-group-item-text"
      }, "Start: " + (this.isoToDate(this.props.activity.start_date))), d.p({
        className: "list-group-item-text"
      }, "Type: " + this.props.activity.type), d.p({
        className: "list-group-item-text"
      }, "Distance: " + (this.metersToMiles(this.props.activity.distance)) + " miles")));
    }
  }));

  Activities = React.createFactory(React.createClass({
    displayName: "Activities",
    getInitialState: function() {
      return {
        data: null
      };
    },
    componentDidMount: function() {
      return $.ajax({
        url: "/strava/activities",
        success: (function(_this) {
          return function(res) {
            return _this.setState({
              data: res.data
            });
          };
        })(this)
      });
    },
    componentDidUpdate: function() {
      return $('.activities').css({
        height: $(window).innerHeight()
      });
    },
    render: function() {
      var activity;
      if (!this.state.data) {
        return LoadingDots({
          thingToLoad: "Activities"
        });
      }
      return d.div({
        className: "activities"
      }, (function() {
        var i, len, ref, results;
        ref = this.state.data;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          activity = ref[i];
          results.push(Activity({
            activity: activity,
            key: activity.id,
            onSelectActivity: this.props.onSelectActivity,
            selectedActivity: this.props.selectedActivity
          }));
        }
        return results;
      }).call(this));
    }
  }));

  d = React.DOM;

  ce = React.createElement;

  createClass = React.createFactory(React.createClass);

  Sidebar = React.createFactory(React.createClass({
    displayName: "Sidebar",
    propTypes: {
      onSelectActivity: React.PropTypes.func,
      selectedActivity: React.PropTypes.object
    },
    render: function() {
      return Activities({
        onSelectActivity: this.props.onSelectActivity,
        selectedActivity: this.props.selectedActivity
      });
    }
  }));

  d = React.DOM;

  ce = React.createElement;

  Main = React.createClass({
    displayName: "Main",
    getInitialState: function() {
      return {
        activity: null
      };
    },
    onSelectActivity: function(activity) {
      return this.setState({
        activity: activity
      });
    },
    render: function() {
      return d.div({
        className: "row"
      }, d.div({
        className: "col-md-2 col-sm-2"
      }, Sidebar({
        onSelectActivity: this.onSelectActivity,
        selectedActivity: this.state.activity
      })), d.div({
        className: "col-md-10 col-sm-10"
      }, MainContent({
        selectedActivity: this.state.activity
      })));
    }
  });

  $(function() {
    var react_content;
    react_content = document.getElementById('react-content');
    return ReactDOM.render(ce(Main, null, null), react_content);
  });

}).call(this);
